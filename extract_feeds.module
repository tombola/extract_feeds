<?php
/* implementation of hook_help */
function extract_feeds_help($path, $arg) {
	switch ($path){
		case 'admin/help#extract_feeds':
			$help = array(
			'Completes extract nodes with Feeds Xpath information on creation 
			so that the bibliographic information can then be imported.',
			'The system weight of this module must be greater than that of feeds 
			module so that it can alter feeds form fields.',
			);
			foreach ($help as $line) {
				 $txt .= '<p>'.t($line).'</p>';
			}
			return $txt;
			break;
	}
}

/**
 * Implementation of hook_nodeapi().
 */
function extract_feeds_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {	
	$importable_nodetypes = array('extract');
	if (in_array($node->type, $importable_nodetypes)) {
		switch ($op) {
			case 'insert':
			case 'update':
				// is 'import biblio' checkbox is ticked?
				if ($node->field_import[0]['value']) {
					switch ($node->field_import[0]['value']) {
						case 1:	
							// run feeds importer
							//feeds_batch_set(t('Importing'), 'import', $importer_id, $node->nid);
							break;
					}
				}
				break;
			case 'validate':
				//_set_node_feed($node, $node->field_import[0]['value']);
				if ($node->field_import[0]['value']) {
					switch ($node->field_import[0]['value']) {
						case 'copac':	
							// run feeds importer
							feeds_batch_set(t('Importing'), 'import', $importer_id, $node->nid);
							break;
					}
				}
				break;
			case 'presave':		
				// set feed details based on import source (eg copac) and available biblio info
				//
				//dpm($node);
				
				
				break;		
		}
	}			
}


// called during presave
function _set_node_feed(&$node, $import_source) {
	switch ($import_source) {
		case 0:
		case 1:
			// copac
			if ($isbn = $node->field_isbn[0]['value']) {
				dpm('setting feeds info');
				$copac_sru_query = 'http://copac.ac.uk:3000/copac?operation=searchRetrieve&version=1.1&query=bath.isbn=%%22%s%%22&maximumRecords=1&recordSchema=mods';
				$node->feeds['FeedsHTTPFetcher']['source'] = sprintf($copac_sru_query, $isbn); //
				//dpm(drupal_urlencode(sprintf($copac_sru_query, $isbn)));
				$node->feeds['FeedsXPathParserXML']['xpath']['context'] = "//mods/*";
				$node->feeds['FeedsXPathParserXML']['xpath']['sources']['xpathparser:1'] =  "//titleInfo/title";
				break;
			}
			
			break;
	}
}

// implements hook_form_alter
function extract_feeds_form_alter(&$form, &$form_state, $form_id) {
	// set defaults for feed settings so that validates
	if ($form_id == "extract_node_form") {
		_set_nodeform_feeds_defaults($form);
	}
}

function _set_nodeform_feeds_defaults(&$form) {
	// for testing only
	$isbn = "159200346X";
	$copac_sru = 'http://copac.ac.uk:3000/copac?operation=searchRetrieve&version=1.1&query=bath.isbn=%%22%s%%22&maximumRecords=1&recordSchema=mods';
	$copac_sru_query = sprintf($copac_sru, $isbn);
	// end for testing only
	
	$form['feeds']['FeedsHTTPFetcher']['source']['#required'] = FALSE;
	$form['feeds']['FeedsHTTPFetcher']['source']['#default_value'] = $copac_sru_query; //"http://copac.ac.uk:3000/copac";
	$form['feeds']['FeedsXPathParserXML']['xpath']['context']['#default_value'] = "//mods/*";
	$form['feeds']['FeedsXPathParserXML']['xpath']['sources']['xpathparser:1']['#default_value'] =  "//titleInfo/title";
}

function _set_node_feeds_defaults(&$node) {
	$node->feeds['FeedsHTTPFetcher']['source'] = "http://copac.ac.uk:3000/copac?operation=searchRetrieve&version=1.1&query=bath.isbn=%22159200346X%22&maximumRecords=1&recordSchema=mods";
	$node->feeds['FeedsXPathParserXML']['xpath']['context'] = "//mods/*";
	$node->feeds['FeedsXPathParserXML']['xpath']['sources']['xpathparser:1'] =  "titleInfo/title";
}


// Not yet in use in this module
/*
function extract_feeds_strip_isbn(&$node) {
	$node->field_isbn[0]['value'] = str_replace('ISBN-10', '', $node->field_isbn[0]['value'] );
	$node->field_isbn[0]['value'] = str_replace('ISBN-13', '', $node->field_isbn[0]['value'] );
	$node->field_isbn[0]['value'] = str_replace('ISBN', '', $node->field_isbn[0]['value'] );
	$node->field_isbn[0]['value'] = preg_replace('/[^a-zA-Z0-9\s]/', '', $node->field_isbn[0]['value']);
}
*/